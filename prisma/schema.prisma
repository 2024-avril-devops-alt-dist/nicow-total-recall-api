datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  email            String   @unique
  role             Role     @default(USER)
  phoneNotification Boolean
  phoneNumber      String
  bookings         Booking[] @relation("userBookings")
}

model Passenger {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  age       Int
  bookings  BookingsOnPassengers[] @relation("passengerBookings")
}

model Booking {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  bookingStatus String
  userId        String   @db.ObjectId
  user          User @relation("userBookings", fields: [userId], references: [id])
  flightId      String   @db.ObjectId
  flight        Flight @relation("flightBookings", fields: [flightId], references: [id])
  passengers    BookingsOnPassengers[] @relation("bookingPassengers")
}

model BookingsOnPassengers {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  bookingId   String   @db.ObjectId
  passengerId String   @db.ObjectId
  booking     Booking  @relation("bookingPassengers", fields: [bookingId], references: [id])
  passenger   Passenger @relation("passengerBookings", fields: [passengerId], references: [id])

  @@unique([bookingId, passengerId])
}

model Flight {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  bookingOpenStatus  Boolean
  flightStatus       Boolean @default(true)
  departureAirport   String
  arrivalAirport     String
  departureDate      DateTime
  arrivalDate        DateTime
  airlineCompanyId   String   @db.ObjectId
  airlineCompany     AirlineCompany @relation(fields: [airlineCompanyId], references: [id])
  stopovers          FlightsOnStopovers[] @relation("flightStopovers")
  bookings           Booking[] @relation("flightBookings")
}

model FlightsOnStopovers {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  flightId    String   @db.ObjectId
  stopoverId  String   @db.ObjectId
  flight      Flight   @relation("flightStopovers", fields: [flightId], references: [id])
  stopover    Stopover @relation(fields: [stopoverId], references: [id])

  @@unique([flightId, stopoverId])
}

model Stopover {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  arrivalDate   DateTime
  departureDate DateTime
  locationId    String   @db.ObjectId
  location      Location @relation(fields: [locationId], references: [id])
  FlightStopover FlightsOnStopovers[]
}

model Location {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  city       String
  country    String
  stopovers  Stopover[]
  airports   Airport[]
  servedBy   AirportsOnLocations[]
}

model Airport {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  airportName String
  servedCities  AirportsOnLocations[]
  locationId  String   @db.ObjectId
  location    Location @relation(fields: [locationId], references: [id])
}

model AirportsOnLocations {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  airportId  String   @db.ObjectId
  locationId String   @db.ObjectId

  airport    Airport  @relation(fields: [airportId], references: [id])
  location   Location @relation(fields: [locationId], references: [id])

  @@unique([airportId, locationId])
}

model AirlineCompany {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  companyName  String
  flights      Flight[]
}

enum Role {
  USER
  ADMIN
}